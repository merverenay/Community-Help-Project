{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function HelpPosts() {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchUserDetailsAndPosts = async () => {\n//             try {\n//                 const email = sessionStorage.getItem('userEmail');\n//                 if (!email) {\n//                     console.error('No email found in sessionStorage');\n//                     setError('User email is not available');\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n//                 console.log(\"API Response:\", userResponse.data); // Log the entire API response\n//                 console.log(\"suerResponse.data\", userResponse.data);\n//                 console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n//                 // Early validation of the response\n//                 if (!userResponse.data || !userResponse.data.helpToPostlist) {\n//                     console.error('Unexpected API response structure:', userResponse.data);\n//                     setError('Unexpected API response structure');\n//                     setLoading(false);\n//                     return;  // Stop processing since the required data is not present\n//                 }\n\n//                 const postIds = userResponse.data.helpToPostlist;\n//                 console.log(\"post idss\", postIds);\n//                 if (postIds.length === 0) {\n//                     console.log(\"No posts or empty posts list.\");\n//                     setPosts([]);\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n//                 setPosts(postsResponse.data);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//                 setError('Failed to fetch posts');\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchUserDetailsAndPosts();\n//     }, []);\n\n//     if (loading) return <div>Loading...</div>;\n//     if (error) return <div>Error: {error}</div>;\n\n//     return (\n//         <div>\n//             {posts.map(post => (\n//                 <div key={post.id}>\n//                     <h3>{post.title}</h3>\n//                     <p>{post.description}</p>\n//                     <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default HelpPosts;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPostById = async postId => {\n      try {\n        const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n        return response.data; // Return individual post data\n      } catch (error) {\n        console.error('Failed to fetch post details:', error);\n        // Optionally handle individual post errors, e.g., continue loading other posts\n      }\n    };\n    const fetchUserDetailsAndPosts = async () => {\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          console.error('No email found in sessionStorage');\n          setError('User email is not available');\n          setLoading(false);\n          return;\n        }\n        const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        const postIds = userResponse.data.helpToPostList || [];\n        if (postIds.length === 0) {\n          console.log(\"No posts or empty posts list.\");\n          setPosts([]);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch each post by ID\n        const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n        setPosts(fetchPosts.filter(post => post !== undefined)); // Filter out any undefined responses\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {/* Navigate to detailed view */},\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(HelpPosts, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","loading","setLoading","error","setError","fetchPostById","postId","response","get","data","console","fetchUserDetailsAndPosts","email","sessionStorage","getItem","userResponse","postIds","helpToPostList","length","log","fetchPosts","Promise","all","map","id","filter","post","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","onClick","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function HelpPosts() {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchUserDetailsAndPosts = async () => {\n//             try {\n//                 const email = sessionStorage.getItem('userEmail');\n//                 if (!email) {\n//                     console.error('No email found in sessionStorage');\n//                     setError('User email is not available');\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n//                 console.log(\"API Response:\", userResponse.data); // Log the entire API response\n//                 console.log(\"suerResponse.data\", userResponse.data);\n//                 console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n\n\n//                 // Early validation of the response\n//                 if (!userResponse.data || !userResponse.data.helpToPostlist) {\n//                     console.error('Unexpected API response structure:', userResponse.data);\n//                     setError('Unexpected API response structure');\n//                     setLoading(false);\n//                     return;  // Stop processing since the required data is not present\n//                 }\n\n//                 const postIds = userResponse.data.helpToPostlist;\n//                 console.log(\"post idss\", postIds);\n//                 if (postIds.length === 0) {\n//                     console.log(\"No posts or empty posts list.\");\n//                     setPosts([]);\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n//                 setPosts(postsResponse.data);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//                 setError('Failed to fetch posts');\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchUserDetailsAndPosts();\n//     }, []);\n\n//     if (loading) return <div>Loading...</div>;\n//     if (error) return <div>Error: {error}</div>;\n\n//     return (\n//         <div>\n//             {posts.map(post => (\n//                 <div key={post.id}>\n//                     <h3>{post.title}</h3>\n//                     <p>{post.description}</p>\n//                     <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default HelpPosts;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchPostById = async (postId) => {\n            try {\n                const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n                return response.data; // Return individual post data\n            } catch (error) {\n                console.error('Failed to fetch post details:', error);\n                // Optionally handle individual post errors, e.g., continue loading other posts\n            }\n        };\n\n        const fetchUserDetailsAndPosts = async () => {\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    console.error('No email found in sessionStorage');\n                    setError('User email is not available');\n                    setLoading(false);\n                    return;\n                }\n\n                const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n                const postIds = userResponse.data.helpToPostList || [];\n\n                if (postIds.length === 0) {\n                    console.log(\"No posts or empty posts list.\");\n                    setPosts([]);\n                    setLoading(false);\n                    return;\n                }\n\n                // Fetch each post by ID\n                const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n                setPosts(fetchPosts.filter(post => post !== undefined)); // Filter out any undefined responses\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError('Failed to fetch posts');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div>\n            {posts.map(post => (\n                <div key={post.id}>\n                    <h3>{post.title}</h3>\n                    <p>{post.description}</p>\n                    <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default HelpPosts;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}