{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUserDetailsAndPosts = async () => {\n      const fetchPostById = async postId => {\n        try {\n          const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n          console.log(\"response.data\", response.data);\n          return response.data; // Return individual post data\n        } catch (error) {\n          console.error('Failed to fetch post details:', error);\n          // Optionally handle individual post errors, e.g., continue loading other posts\n        }\n      };\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          console.error('No email found in sessionStorage');\n          setError('User email is not available');\n          setLoading(false);\n          return;\n        }\n        const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        console.log(\"API Response:\", userResponse.data); // Log the entire API response\n        console.log(\"suerResponse.data\", userResponse.data);\n        console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n        // Early validation of the response\n        if (!userResponse.data || !userResponse.data.helpToPostlist) {\n          console.error('Unexpected API response structure:', userResponse.data);\n          setError('Unexpected API response structure');\n          setLoading(false);\n          return; // Stop processing since the required data is not present\n        }\n        const postIds = userResponse.data.helpToPostlist;\n        console.log(\"post idss\", postIds);\n        if (postIds.length === 0) {\n          console.log(\"No posts or empty posts list.\");\n          setPosts([]);\n          setLoading(false);\n          return;\n        }\n\n        // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n        const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n        // setPosts(postsResponse.data);\n        setPosts(fetchPosts.filter(post => post !== undefined));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {/* Navigate to detailed view */},\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(HelpPosts, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","loading","setLoading","error","setError","fetchUserDetailsAndPosts","fetchPostById","postId","response","get","console","log","data","email","sessionStorage","getItem","userResponse","helpToPostlist","postIds","length","fetchPosts","Promise","all","map","id","filter","post","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","onClick","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchUserDetailsAndPosts = async () => {\n            const fetchPostById = async (postId) => {\n                try {\n                    const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n                    console.log(\"response.data\", response.data)\n                    return response.data; // Return individual post data\n\n                } catch (error) {\n                    console.error('Failed to fetch post details:', error);\n                    // Optionally handle individual post errors, e.g., continue loading other posts\n                }\n            };\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    console.error('No email found in sessionStorage');\n                    setError('User email is not available');\n                    setLoading(false);\n                    return;\n                }\n\n                const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n\n                console.log(\"API Response:\", userResponse.data); // Log the entire API response\n                console.log(\"suerResponse.data\", userResponse.data);\n                console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n\n\n                // Early validation of the response\n                if (!userResponse.data || !userResponse.data.helpToPostlist) {\n                    console.error('Unexpected API response structure:', userResponse.data);\n                    setError('Unexpected API response structure');\n                    setLoading(false);\n                    return;  // Stop processing since the required data is not present\n                }\n\n                const postIds = userResponse.data.helpToPostlist;\n                console.log(\"post idss\", postIds);\n                if (postIds.length === 0) {\n                    console.log(\"No posts or empty posts list.\");\n                    setPosts([]);\n                    setLoading(false);\n                    return;\n                }\n\n                // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n                const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n                // setPosts(postsResponse.data);\n                setPosts(fetchPosts.filter(post => post !== undefined));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError('Failed to fetch posts');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div>\n            {posts.map(post => (\n                <div key={post.id}>\n                    <h3>{post.title}</h3>\n                    <p>{post.description}</p>\n\n                    <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default HelpPosts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}