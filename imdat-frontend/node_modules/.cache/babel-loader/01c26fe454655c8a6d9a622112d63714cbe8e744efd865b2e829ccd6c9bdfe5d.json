{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function HelpPosts() {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchUserDetailsAndPosts = async () => {\n//             const fetchPostById = async (postId) => {\n//                 try {\n//                     const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n//                     console.log(\"response.data\", response.data)\n//                     return response.data; // Return individual post data\n\n//                 } catch (error) {\n//                     console.error('Failed to fetch post details:', error);\n//                     // Optionally handle individual post errors, e.g., continue loading other posts\n//                 }\n//             };\n//             try {\n//                 const email = sessionStorage.getItem('userEmail');\n//                 if (!email) {\n//                     console.error('No email found in sessionStorage');\n//                     setError('User email is not available');\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n\n//                 console.log(\"API Response:\", userResponse.data); // Log the entire API response\n//                 console.log(\"suerResponse.data\", userResponse.data);\n//                 console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n//                 // Early validation of the response\n//                 if (!userResponse.data || !userResponse.data.helpToPostlist) {\n//                     console.error('Unexpected API response structure:', userResponse.data);\n//                     setError('Unexpected API response structure');\n//                     setLoading(false);\n//                     return;  // Stop processing since the required data is not present\n//                 }\n\n//                 const postIds = userResponse.data.helpToPostlist;\n//                 console.log(\"post idss\", postIds);\n//                 if (postIds.length === 0) {\n//                     console.log(\"No posts or empty posts list.\");\n//                     setPosts([]);\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n//                 const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n//                 // setPosts(postsResponse.data);\n//                 setPosts(fetchPosts.filter(post => post !== undefined));\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//                 setError('Failed to fetch posts');\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchUserDetailsAndPosts();\n//     }, []);\n\n//     if (loading) return <div>Loading...</div>;\n//     if (error) return <div>Error: {error}</div>;\n\n//     return (\n//         <div>\n//             {posts.map(post => (\n//                 <div key={post.id}>\n//                     <h3>{post.title}</h3>\n//                     <p>{post.description}</p>\n\n//                     <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default HelpPosts;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport \"../styles/PostShow.css\";\nimport PostShow from \"./PostShow\";\n\n// Import other necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [userDetails, setUserDetails] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPostById = async postId => {\n      try {\n        const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n        return response.data; // Return individual post data\n      } catch (error) {\n        console.error('Failed to fetch post details:', error);\n        return undefined; // Continue loading other posts even if one fails\n      }\n    };\n    const withdrawHelp = async postId => {\n      try {\n        const response = await axios.post(`http://localhost:8081/api/posts/withdrawHelp/${postId}`);\n        console.log(\"Help withdrawn successfully\", response.data);\n        // Optionally update UI or state based on response\n      } catch (error) {\n        console.error('Error withdrawing help:', error);\n      }\n    };\n    const fetchUserDetailsAndPosts = async () => {\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          throw new Error('No email found in sessionStorage');\n        }\n        const post = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        setUserDetails(post.data); // Save user details for later use in render\n\n        if (!post.data || !post.data.helpToPostlist) {\n          throw new Error('Unexpected API response structure');\n        }\n        const postIds = post.data.helpToPostlist;\n        if (postIds.length === 0) {\n          throw new Error('No posts or empty posts list.');\n        }\n        const fetchPosts = await Promise.all(postIds.map(fetchPostById));\n        setPosts(fetchPosts.filter(post => post !== undefined));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postContainer\",\n    children: posts.map((post, index) =>\n    /*#__PURE__*/\n    // Use PostShow here with the new props for button visibility\n    _jsxDEV(PostShow, {\n      post: post,\n      showEmergencyButton: false,\n      showDonationButton: false\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n_s(HelpPosts, \"P4CMlSE0w5ytW/99E7jgDDCER2Q=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","axios","PostShow","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","userDetails","setUserDetails","loading","setLoading","error","setError","fetchPostById","postId","response","get","data","console","undefined","withdrawHelp","post","log","fetchUserDetailsAndPosts","email","sessionStorage","getItem","Error","helpToPostlist","postIds","length","fetchPosts","Promise","all","map","filter","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","showEmergencyButton","showDonationButton","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function HelpPosts() {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchUserDetailsAndPosts = async () => {\n//             const fetchPostById = async (postId) => {\n//                 try {\n//                     const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n//                     console.log(\"response.data\", response.data)\n//                     return response.data; // Return individual post data\n\n//                 } catch (error) {\n//                     console.error('Failed to fetch post details:', error);\n//                     // Optionally handle individual post errors, e.g., continue loading other posts\n//                 }\n//             };\n//             try {\n//                 const email = sessionStorage.getItem('userEmail');\n//                 if (!email) {\n//                     console.error('No email found in sessionStorage');\n//                     setError('User email is not available');\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n\n//                 console.log(\"API Response:\", userResponse.data); // Log the entire API response\n//                 console.log(\"suerResponse.data\", userResponse.data);\n//                 console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n\n\n\n//                 // Early validation of the response\n//                 if (!userResponse.data || !userResponse.data.helpToPostlist) {\n//                     console.error('Unexpected API response structure:', userResponse.data);\n//                     setError('Unexpected API response structure');\n//                     setLoading(false);\n//                     return;  // Stop processing since the required data is not present\n//                 }\n\n//                 const postIds = userResponse.data.helpToPostlist;\n//                 console.log(\"post idss\", postIds);\n//                 if (postIds.length === 0) {\n//                     console.log(\"No posts or empty posts list.\");\n//                     setPosts([]);\n//                     setLoading(false);\n//                     return;\n//                 }\n\n//                 // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n//                 const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n//                 // setPosts(postsResponse.data);\n//                 setPosts(fetchPosts.filter(post => post !== undefined));\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//                 setError('Failed to fetch posts');\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchUserDetailsAndPosts();\n//     }, []);\n\n//     if (loading) return <div>Loading...</div>;\n//     if (error) return <div>Error: {error}</div>;\n\n//     return (\n//         <div>\n//             {posts.map(post => (\n//                 <div key={post.id}>\n//                     <h3>{post.title}</h3>\n//                     <p>{post.description}</p>\n\n//                     <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default HelpPosts;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport \"../styles/PostShow.css\";\nimport PostShow from \"./PostShow\";\n\n// Import other necessary components\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [userDetails, setUserDetails] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchPostById = async (postId) => {\n            try {\n                const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n                return response.data;  // Return individual post data\n            } catch (error) {\n                console.error('Failed to fetch post details:', error);\n                return undefined;  // Continue loading other posts even if one fails\n            }\n        };\n        const withdrawHelp = async (postId) => {\n            try {\n                const response = await axios.post(`http://localhost:8081/api/posts/withdrawHelp/${postId}`);\n                console.log(\"Help withdrawn successfully\", response.data);\n                // Optionally update UI or state based on response\n            } catch (error) {\n                console.error('Error withdrawing help:', error);\n            }\n        };\n\n        const fetchUserDetailsAndPosts = async () => {\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    throw new Error('No email found in sessionStorage');\n                }\n\n                const post = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n                setUserDetails(post.data);  // Save user details for later use in render\n\n                if (!post.data || !post.data.helpToPostlist) {\n                    throw new Error('Unexpected API response structure');\n                }\n\n                const postIds = post.data.helpToPostlist;\n                if (postIds.length === 0) {\n                    throw new Error('No posts or empty posts list.');\n                }\n\n                const fetchPosts = await Promise.all(postIds.map(fetchPostById));\n                setPosts(fetchPosts.filter(post => post !== undefined));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className='postContainer'>\n            {posts.map((post, index) => (\n                // Use PostShow here with the new props for button visibility\n                <PostShow key={index} post={post} showEmergencyButton={false} showDonationButton={false} />\n            ))}\n        </div>\n    );\n\n}\n\nexport default HelpPosts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}