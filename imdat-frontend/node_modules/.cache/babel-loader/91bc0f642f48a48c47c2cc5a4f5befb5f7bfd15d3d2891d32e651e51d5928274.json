{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ConnectionClosedEvent } from 'mongodb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUserDetailsAndPosts = async () => {\n      const fetchPostById = async postId => {\n        try {\n          const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n          console.log(\"response.data\", response.data);\n          return response.data; // Return individual post data\n        } catch (error) {\n          console.error('Failed to fetch post details:', error);\n          // Optionally handle individual post errors, e.g., continue loading other posts\n        }\n      };\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          console.error('No email found in sessionStorage');\n          setError('User email is not available');\n          setLoading(false);\n          return;\n        }\n        const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        console.log(\"API Response:\", userResponse.data); // Log the entire API response\n        console.log(\"suerResponse.data\", userResponse.data);\n        console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n        console.log(\"userRespisnse\", userResponse.data);\n\n        // Early validation of the response\n        if (!userResponse.data || !userResponse.data.helpToPostlist) {\n          console.error('Unexpected API response structure:', userResponse.data);\n          setError('Unexpected API response structure');\n          setLoading(false);\n          return; // Stop processing since the required data is not present\n        }\n        const postIds = userResponse.data.helpToPostlist;\n        console.log(\"post idss\", postIds);\n        if (postIds.length === 0) {\n          console.log(\"No posts or empty posts list.\");\n          setPosts([]);\n          setLoading(false);\n          return;\n        }\n\n        // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n        const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n        // setPosts(postsResponse.data);\n        setPosts(fetchPosts.filter(post => post !== undefined));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 23\n  }, this);\n\n  // return (\n  //     <div className='postShow-mainDiv'>\n  //         <div className='postShow-top'>\n  //             <div className='avatar-container'>\n  //                 <div style={{ marginRight: '5px' }}><PersonIcon /></div>\n  //                 <div>{userResponse.firstName} {userResponse.lastName}</div>\n  //             </div>\n\n  //         </div>\n  //         <div className='postShow-body'>\n  //             <p className='postShow-status'>{userResponse.dataemail}</p>\n  //             <p className='postShow-adress'>{userResponse.datadescription}</p>\n  //             {userResponse.imageBase64 && (\n  //                 <div className='postShow-image'>\n  //                     <img src={`data:image/jpeg;base64,${userResponse.data.imageBase64}`} alt='Post Image' />\n  //                 </div>\n  //             )}\n  //             <div style={{ display: post.isEmergencyPost ? 'block' : 'none' }}>\n  //                 <AcildurumButton post={post} />\n  //             </div>\n  //             <div style={{ display: !post.isEmergencyPost ? 'block' : 'none' }}>\n  //                 <BagisButton post={post} />\n  //             </div>\n  //         </div>\n  //     </div>\n  // );\n}\n_s(HelpPosts, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","axios","ConnectionClosedEvent","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","loading","setLoading","error","setError","fetchUserDetailsAndPosts","fetchPostById","postId","response","get","console","log","data","email","sessionStorage","getItem","userResponse","helpToPostlist","postIds","length","fetchPosts","Promise","all","map","id","filter","post","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ConnectionClosedEvent } from 'mongodb';\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchUserDetailsAndPosts = async () => {\n            const fetchPostById = async (postId) => {\n                try {\n                    const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n                    console.log(\"response.data\", response.data)\n                    return response.data; // Return individual post data\n\n                } catch (error) {\n                    console.error('Failed to fetch post details:', error);\n                    // Optionally handle individual post errors, e.g., continue loading other posts\n                }\n            };\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    console.error('No email found in sessionStorage');\n                    setError('User email is not available');\n                    setLoading(false);\n                    return;\n                }\n\n                const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n\n                console.log(\"API Response:\", userResponse.data); // Log the entire API response\n                console.log(\"suerResponse.data\", userResponse.data);\n                console.log(\"suerResponse.data.helpToPostlist\", userResponse.data.helpToPostlist);\n                console.log(\"userRespisnse\", userResponse.data)\n\n\n\n                // Early validation of the response\n                if (!userResponse.data || !userResponse.data.helpToPostlist) {\n                    console.error('Unexpected API response structure:', userResponse.data);\n                    setError('Unexpected API response structure');\n                    setLoading(false);\n                    return;  // Stop processing since the required data is not present\n                }\n\n                const postIds = userResponse.data.helpToPostlist;\n                console.log(\"post idss\", postIds);\n                if (postIds.length === 0) {\n                    console.log(\"No posts or empty posts list.\");\n                    setPosts([]);\n                    setLoading(false);\n                    return;\n                }\n\n                // const postsResponse = await axios.post('http://localhost:8081/api/posts/getPostsById/', { ids: postIds });\n                const fetchPosts = await Promise.all(postIds.map(id => fetchPostById(id)));\n                // setPosts(postsResponse.data);\n                setPosts(fetchPosts.filter(post => post !== undefined));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError('Failed to fetch posts');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    // return (\n    //     <div className='postShow-mainDiv'>\n    //         <div className='postShow-top'>\n    //             <div className='avatar-container'>\n    //                 <div style={{ marginRight: '5px' }}><PersonIcon /></div>\n    //                 <div>{userResponse.firstName} {userResponse.lastName}</div>\n    //             </div>\n\n    //         </div>\n    //         <div className='postShow-body'>\n    //             <p className='postShow-status'>{userResponse.dataemail}</p>\n    //             <p className='postShow-adress'>{userResponse.datadescription}</p>\n    //             {userResponse.imageBase64 && (\n    //                 <div className='postShow-image'>\n    //                     <img src={`data:image/jpeg;base64,${userResponse.data.imageBase64}`} alt='Post Image' />\n    //                 </div>\n    //             )}\n    //             <div style={{ display: post.isEmergencyPost ? 'block' : 'none' }}>\n    //                 <AcildurumButton post={post} />\n    //             </div>\n    //             <div style={{ display: !post.isEmergencyPost ? 'block' : 'none' }}>\n    //                 <BagisButton post={post} />\n    //             </div>\n    //         </div>\n    //     </div>\n    // );\n\n\n}\n\nexport default HelpPosts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}