{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport PostShow from \"./PostShow\";\nimport \"../styles/PostShow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [userDetails, setUserDetails] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Define the function outside useEffect using useCallback\n  const withdrawHelp = useCallback(async postId => {\n    try {\n      const response = await axios.post(`http://localhost:8081/api/posts/withdrawHelp/${postId}`);\n      console.log(\"Help withdrawn successfully\", response.data);\n      // Optionally update UI or state based on response\n      // Update the posts array to remove the withdrawn post\n      setPosts(currentPosts => currentPosts.filter(post => post.id !== postId));\n    } catch (error) {\n      console.error('Error withdrawing help:', error);\n    }\n  }, []); // if dependent on dynamic variables, include them in this dependency array\n\n  useEffect(() => {\n    const fetchPostById = async postId => {\n      try {\n        const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n        return response.data;\n      } catch (error) {\n        console.error('Failed to fetch post details:', error);\n        return undefined;\n      }\n    };\n    const fetchUserDetailsAndPosts = async () => {\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          throw new Error('No email found in sessionStorage');\n        }\n        const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        setUserDetails(userResponse.data);\n        if (!userResponse.data || !userResponse.data.helpToPostlist) {\n          throw new Error('Unexpected API response structure');\n        }\n        const postIds = userResponse.data.helpToPostlist;\n        if (postIds.length === 0) {\n          throw new Error('No posts or empty posts list.');\n        }\n        const fetchPosts = await Promise.all(postIds.map(fetchPostById));\n        setPosts(fetchPosts.filter(post => post !== undefined));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, [withdrawHelp]); // make sure to include withdrawHelp here if its logic depends on the fetched data\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postContainer\",\n    children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(PostShow, {\n      post: post,\n      showEmergencyButton: false,\n      showDonationButton: false,\n      showWithdrawButton: post.isEmergencyPost,\n      onWithdraw: withdrawHelp\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(HelpPosts, \"2iXqku8wXA/sUY5JA7K8sH8aKEE=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","PostShow","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","userDetails","setUserDetails","loading","setLoading","error","setError","withdrawHelp","postId","response","post","console","log","data","currentPosts","filter","id","fetchPostById","get","undefined","fetchUserDetailsAndPosts","email","sessionStorage","getItem","Error","userResponse","helpToPostlist","postIds","length","fetchPosts","Promise","all","map","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","showEmergencyButton","showDonationButton","showWithdrawButton","isEmergencyPost","onWithdraw","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport PostShow from \"./PostShow\";\nimport \"../styles/PostShow.css\";\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [userDetails, setUserDetails] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Define the function outside useEffect using useCallback\n    const withdrawHelp = useCallback(async (postId) => {\n        try {\n            const response = await axios.post(`http://localhost:8081/api/posts/withdrawHelp/${postId}`);\n            console.log(\"Help withdrawn successfully\", response.data);\n            // Optionally update UI or state based on response\n            // Update the posts array to remove the withdrawn post\n            setPosts(currentPosts => currentPosts.filter(post => post.id !== postId));\n        } catch (error) {\n            console.error('Error withdrawing help:', error);\n        }\n    }, []);  // if dependent on dynamic variables, include them in this dependency array\n\n    useEffect(() => {\n        const fetchPostById = async (postId) => {\n            try {\n                const response = await axios.get(`http://localhost:8081/api/posts/getPostById/${postId}`);\n                return response.data;\n            } catch (error) {\n                console.error('Failed to fetch post details:', error);\n                return undefined;\n            }\n        };\n\n        const fetchUserDetailsAndPosts = async () => {\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    throw new Error('No email found in sessionStorage');\n                }\n\n                const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n                setUserDetails(userResponse.data);\n\n                if (!userResponse.data || !userResponse.data.helpToPostlist) {\n                    throw new Error('Unexpected API response structure');\n                }\n\n                const postIds = userResponse.data.helpToPostlist;\n                if (postIds.length === 0) {\n                    throw new Error('No posts or empty posts list.');\n                }\n\n                const fetchPosts = await Promise.all(postIds.map(fetchPostById));\n                setPosts(fetchPosts.filter(post => post !== undefined));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, [withdrawHelp]); // make sure to include withdrawHelp here if its logic depends on the fetched data\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className='postContainer'>\n            {posts.map((post, index) => (\n                <PostShow\n                    key={index}\n                    post={post}\n                    showEmergencyButton={false}\n                    showDonationButton={false}\n                    showWithdrawButton={post.isEmergencyPost}\n                    onWithdraw={withdrawHelp}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default HelpPosts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}