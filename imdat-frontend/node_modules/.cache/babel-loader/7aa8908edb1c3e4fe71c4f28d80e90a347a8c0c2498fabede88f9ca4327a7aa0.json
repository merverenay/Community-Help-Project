{"ast":null,"code":"var _jsxFileName = \"/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HelpPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUserDetailsAndPosts = async () => {\n      try {\n        const email = sessionStorage.getItem('userEmail');\n        if (!email) {\n          console.error('No email found in sessionStorage');\n          setError('User email is not available');\n          setLoading(false);\n          return;\n        }\n        const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n        console.log(\"API Response:\", userResponse.data); // Log the entire API response\n\n        const postIds = userResponse.data.helpToPostList;\n        if (!postIds || postIds.length === 0) {\n          console.log(\"No posts or undefined posts list.\");\n          setPosts([]);\n          setLoading(false);\n          return;\n        }\n        const postsResponse = await axios.post('http://localhost:8082/api/posts/getPostsByIds', {\n          ids: postIds\n        });\n        setPosts(postsResponse.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserDetailsAndPosts();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {/* Navigate to detailed view */},\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(HelpPosts, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = HelpPosts;\nexport default HelpPosts;\nvar _c;\n$RefreshReg$(_c, \"HelpPosts\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","HelpPosts","_s","posts","setPosts","loading","setLoading","error","setError","fetchUserDetailsAndPosts","email","sessionStorage","getItem","console","userResponse","get","log","data","postIds","helpToPostList","length","postsResponse","post","ids","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","description","onClick","id","_c","$RefreshReg$"],"sources":["/Users/leyla/Desktop/imdat-frontend/src/Components/HelpPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction HelpPosts() {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchUserDetailsAndPosts = async () => {\n            try {\n                const email = sessionStorage.getItem('userEmail');\n                if (!email) {\n                    console.error('No email found in sessionStorage');\n                    setError('User email is not available');\n                    setLoading(false);\n                    return;\n                }\n\n                const userResponse = await axios.get(`http://localhost:8082/api/v1/test/user/${email}`);\n                console.log(\"API Response:\", userResponse.data); // Log the entire API response\n\n                const postIds = userResponse.data.helpToPostList;\n                if (!postIds || postIds.length === 0) {\n                    console.log(\"No posts or undefined posts list.\");\n                    setPosts([]);\n                    setLoading(false);\n                    return;\n                }\n\n                const postsResponse = await axios.post('http://localhost:8082/api/posts/getPostsByIds', { ids: postIds });\n                setPosts(postsResponse.data);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError('Failed to fetch posts');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserDetailsAndPosts();\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div>\n            {posts.map(post => (\n                <div key={post.id}>\n                    <h3>{post.title}</h3>\n                    <p>{post.description}</p>\n                    <button onClick={() => {/* Navigate to detailed view */ }}>View Details</button>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default HelpPosts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}